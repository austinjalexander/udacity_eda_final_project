IQR(subset(diamonds, color == 'D')$price)
IQR(subset(diamonds, color == 'J')$price)
qplot(x = diamonds$color, y = price/carat, data = diamonds, geom = 'boxplot')
data(diamonds)
data(diamonds)
data(diamonds)
data(diamonds)
install.packages('ggplot2')
library(ggplot2)
data(diamonds)
summary(diamonds)
diamonds$carat
diamonds$color
?diamonds
names(diamonds)
hist(diamonds$price)
mean(diamonds$price)
median(diamonds$price)
length(diamonds$price[diamonds$price < 500])
length(diamonds$price[diamonds$price < 250])
length(diamonds$price[diamonds$price >= 15000])
qplot(x = price, data = diamonds, binwidth=2000)
#ggsave('price.png')
qplot(x = price, data = diamonds) +
facet_grid(cut ~ .)
by(diamonds$price, diamonds$cut, max)
by(diamonds$price, diamonds$cut, min)
by(diamonds$price, diamonds$cut, median)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
?facet_wrap
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales='free')
qplot(x = price/carat, data = diamonds, binwidth=20) + facet_wrap(~cut, scales='free')
qplot(x = as.integer(diamonds$cut), y = price, data = diamonds, geom = 'boxplot')
summary(subset(diamonds, color == 'D')$price)
summary(subset(diamonds, color == 'J')$price)
IQR(subset(diamonds, color == 'D')$price)
IQR(subset(diamonds, color == 'J')$price)
qplot(x = diamonds$color, y = price/carat, data = diamonds, geom = 'boxplot')
qplot(x = carat, data = diamonds, geom = 'freqpoly')
qplot(x = carat, data = diamonds, geom = 'freqpoly', binwidth = 0.1)
qplot(x = carat, data = diamonds, geom = 'freqpoly', binwidth = 0.5)
qplot(x = carat, data = diamonds, geom = 'freqpoly', binwidth = 0.1)
qplot(x = carat, data = diamonds, geom = 'freqpoly')
qplot(x = carat, data = diamonds, geom = 'freqpoly',
binwidth = 0.1) +
scale_x_continuous(lim = c(0, 6), breaks = seq(0, 6, 0.1))
scale_y_continuous(lim = c(0, 12000), breaks = seq(0, 12000, 1000))
qplot(x = carat, data = diamonds, geom = 'freqpoly',
binwidth = 0.1) +
scale_x_continuous(lim = c(0, 6), breaks = seq(0, 6, 0.1)) +
scale_y_continuous(lim = c(0, 12000), breaks = seq(0, 12000, 1000))
qplot(x = carat, data = diamonds, geom = 'freqpoly',
binwidth = 1)
qplot(x = carat, data = diamonds, geom = 'freqpoly',
binwidth = 0.2) +
scale_x_continuous(lim = c(0, 6), breaks = seq(0, 6, 0.2))
qplot(x = carat, data = diamonds, geom = 'freqpoly',
binwidth = 0.2) +
scale_x_continuous(lim = c(0, 6), breaks = seq(0, 6, 0.2)) +
scale_y_continuous(lim = c(0, 12000), breaks = seq(0, 12000, 1000))
qplot(x = carat, data = diamonds, geom = 'freqpoly',
binwidth = 0.1) +
scale_x_continuous(lim = c(0, 6), breaks = seq(0, 6, 0.1)) +
scale_y_continuous(lim = c(0, 12000), breaks = seq(0, 12000, 1000))
qplot(x = carat, data = diamonds, geom = 'freqpoly',
binwidth = 0.01) +
scale_x_continuous(lim = c(0, 6), breaks = seq(0, 6, 0.01)) +
scale_y_continuous(lim = c(0, 12000), breaks = seq(0, 12000, 1000))
qplot(x = carat, data = diamonds, geom = 'freqpoly',
binwidth = 0.1) +
scale_x_continuous(lim = c(0, 6), breaks = seq(0, 6, 0.1)) +
scale_y_continuous(lim = c(0, 12000), breaks = seq(0, 12000, 1000))
summary(diamonds$carat)
qplot(x = carat, data = diamonds, geom = 'boxplot')
qplot(x = carat, data = diamonds, geom = 'freqpoly',
binwidth = 0.01) +
scale_x_continuous(lim = c(0, 6), breaks = seq(0, 6, 0.01)) +
scale_y_continuous(lim = c(0, 12000), breaks = seq(0, 12000, 1000))
qplot(x = carat, data = diamonds, geom = 'freqpoly',
binwidth = 0.1) +
scale_x_continuous(lim = c(0, 6), breaks = seq(0, 6, 0.1)) +
scale_y_continuous(lim = c(0, 12000), breaks = seq(0, 12000, 1000))
qplot(x = carat, data = diamonds, geom = 'freqpoly',
binwidth = 0.01) +
scale_x_continuous(lim = c(0, 6), breaks = seq(0, 6, 0.01)) +
scale_y_continuous(lim = c(0, 12000), breaks = seq(0, 12000, 1000))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.01)
Which chemical properties influence the quality of red wines?
========================================================
###Austin J. Alexander
```{r echo=FALSE, message=FALSE, warning=FALSE, packages}
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(reshape2)
library(GGally)
library(grid)
library(gridExtra)
library(dplyr)
library(memisc)
Which chemical properties influence the quality of red wines?
========================================================
###Austin J. Alexander
```{r echo=FALSE, message=FALSE, warning=FALSE, packages}
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(reshape2)
library(GGally)
library(grid)
library(gridExtra)
library(dplyr)
library(memisc)
```
###Austin J. Alexander
library(ggplot2)
sessionInfo()
install.packages('ggplot2')
install.packages('reshape2')
install.packages('GGally')
install.packages('grid')
install.packages("grid")
install.packages("gridExtra")
install.packages("dplyr")
install.packages("memisc")
setwd('~/udacity_eda_final_project/')
reds <- read.csv('wineQualityReds.csv')
names(reds[,2:13])
summary(reds[,2:13])
sum(is.na(reds))
table(reds$quality)
ggplot(reds, aes(x = alcohol)) +
geom_histogram(binwidth = range(x)/30) +
facet_grid(quality ~ .)
Which chemical properties influence the quality of red wines?
========================================================
###Austin J. Alexander
```{r echo=FALSE, message=FALSE, warning=FALSE, packages}
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
#install.packages('package_name')
library(ggplot2)
library(reshape2)
library(GGally)
library(grid)
library(gridExtra)
library(dplyr)
library(memisc)
```
```{r echo=FALSE, Load_the_Data}
# Load the Data
setwd('~/udacity_eda_final_project/')
#list.files()
reds <- read.csv('wineQualityReds.csv')
```
------
## Check out the data
##### show column names
```{r echo=FALSE}
names(reds[,2:13])
```
##### basic stats for each column
```{r echo=FALSE}
summary(reds[,2:13])
```
##### check for any NaN values
```{r echo=FALSE}
sum(is.na(reds))
```
##### check the distribution of quality
```{r echo=FALSE}
table(reds$quality)
```
As can be seen above, the vast majority of wines are scored 5 or 6.
```{r echo=FALSE}
# break up the quality scores into quality buckets of 2 scores each
reds_3_4 <- subset(reds, quality == 3 | quality == 4)
reds_5_6 <- subset(reds, quality == 5 | quality == 6)
reds_7_8 <- subset(reds, quality == 7 | quality == 8)
# take bottom 2 and top 2
reds_3_4_7_8 <- merge(reds_3_4, reds_7_8, all =TRUE)
# take bottom and top
reds_3_8 <- subset(reds, quality == 3 | quality == 8)
```
##### proportions
3's and 4's
```{r echo=FALSE}
sum(!is.na(reds_3_4))/sum(!is.na(reds))
```
5's and 6's
```{r echo=FALSE}
sum(!is.na(reds_5_6))/sum(!is.na(reds))
```
7's and 8's
```{r echo=FALSE}
sum(!is.na(reds_7_8))/sum(!is.na(reds))
```
Scores of 5 and 6 account for over 82% percent of all scores!
This suggests that the most useful information might be found by examining the lowest and highest scorers, but we'll save that for later.
## Univariate Plots Section
##### visualize quality
```{r echo=FALSE}
ggplot(reds, aes(x=factor(quality))) +
geom_bar(aes(colour = factor(quality)))
```
Examine correlations (technically these are bivariate plots, but the correlation coefficients are displayed nicely).
```{r echo=FALSE}
# subset reds (arbitrarily) by index number for use in ggpairs
ggpairs(reds[c(2,3,4,13)])
ggpairs(reds[c(5,6,7,8,13)])
ggpairs(reds[c(9,10,11,12,13)])
```
Alcohol, volatile.acidity, and sulphates present correlation coefficient values furthest from zero, so let's examine these further.
##### facet alcohol by quality
```{r echo=FALSE}
ggplot(reds, aes(x = alcohol)) +
geom_histogram(binwidth = range(x)/30) +
facet_grid(quality ~ .)
ggplot(reds, aes(x = alcohol)) +
geom_histogram(binwidth = range(alcohol)/30) +
facet_grid(quality ~ .)
ggplot(reds, aes(x = alcohol)) +
geom_histogram() +
facet_grid(quality ~ .)
ggplot(reds, aes(x = alcohol)) +
geom_histogram(binwidth=20) +
facet_grid(quality ~ .)
ggplot(reds, aes(x = alcohol)) +
geom_histogram(binwidth=1) +
facet_grid(quality ~ .)
ggplot(reds, aes(x = alcohol)) +
geom_histogram() +
facet_grid(quality ~ .)
ggplot(reds, aes(x = alcohol), binwidth=5) +
geom_histogram() +
facet_grid(quality ~ .)
ggplot(reds, aes(x = alcohol)) +
geom_histogram(binwidth=5) +
facet_grid(quality ~ .)
ggplot(reds, aes(x = alcohol)) +
geom_histogram(binwidth=range(x)/30) +
facet_grid(quality ~ .)
ggplot(reds, aes(x = alcohol)) +
geom_histogram(binwidth=range(reds.alcohol)/30) +
facet_grid(quality ~ .)
reds
reds.alcohol
reds[alcohol]
reds['alcohol']
ggplot(reds, aes(x = alcohol)) +
geom_histogram(binwidth=range(reds['alcohol'])/30) +
facet_grid(quality ~ .)
suppressWarnings
ggplot(reds, aes(x = alcohol)) +
geom_histogram() +
facet_grid(quality ~ .)
reds['alcohol']
range(reds['alcohol'])
max(reds['alcohol'])
(max(reds['alcohol']) - min(reds['alcohol']))/30
geom_histogram(binwidth=(max(reds['alcohol']) - min(reds['alcohol']))/30) +
ggplot(reds, aes(x = alcohol)) +
geom_histogram(binwidth=(max(reds['alcohol']) - min(reds['alcohol']))/30) +
facet_grid(quality ~ .)
ggplot(reds, aes(x = alcohol)) +
geom_histogram(binwidth=(max(reds['alcohol']) - min(reds['alcohol']))/30) +
facet_grid(quality ~ .)
reds[alcohol]
reds.alcohol
factor_hist(col)
ggplot(reds, aes(x = col, fill = as.factor(quality))) +
geom_histogram(binwidth=(max(reds[col]) - min(reds[col]))/30)
factor_hist(col)
ggplot(reds, aes(x = col, fill = as.factor(quality))) +
geom_histogram(binwidth=(max(reds[col]) - min(reds[col]))/30)
}
facet_hist <- function(col) {
ggplot(reds, aes(x = col, fill = as.factor(quality))) +
geom_histogram(binwidth=(max(reds[col]) - min(reds[col]))/30)
}
facet_hist <- function(col) {
ggplot(reds, aes(x = col, fill = as.factor(quality))) +
geom_histogram(binwidth=(max(reds[col]) - min(reds[col]))/30)
}
facet_hist('alcohol')
ggplot(reds, aes(x = 'alcohol')) +
geom_histogram() +
facet_grid(quality ~ .)
ggplot(reds, aes(x = alcohol)) +
geom_histogram() +
facet_grid(quality ~ .)
ggplot(reds, aes(x = 'alcohol')) +
geom_histogram() +
facet_grid(quality ~ .)
ggplot(reds, aes(x = alcohol)) +
ggplot(reds, aes(x = alcohol)) +
geom_histogram() +
facet_grid(quality ~ .)
ggplot(reds, aes(x = alcohol)) +
geom_histogram() +
facet_grid(quality ~ .)
reds.alcohol
# helper functions
facet_hist <- function(col) {
ggplot(reds, aes(x = col, fill = as.factor(quality))) +
geom_histogram(binwidth =
(max(reds[toString(col)]) - min(reds[toString(col)]))/30)
}
facet_hist(alcohol)
facet_hist <- function(col) {
ggplot(reds, aes(x = col, fill = as.factor(quality))) +
geom_histogram(binwidth =
(max(reds[col]) - min(reds[col]))/30)
}
facet_hist('alcohol')
max(reds$alcohol)
facet_hist <- function(col) {
ggplot(reds, aes(x = col, fill = as.factor(quality))) +
geom_histogram(binwidth =
(max(col) - min(col))/30)
}
facet_hist(reds$alcohol)
reds$alcohol
facet_hist <- function(col) {
ggplot(reds, aes(x = col, fill = as.factor(quality))) +
geom_histogram(binwidth =
(max(reds$col) - min(reds$col))/30)
}
facet_hist(alcohol)
facet_hist <- function(col) {
ggplot(reds, aes(x = reds$col, fill = as.factor(quality))) +
geom_histogram(binwidth =
(max(reds$col) - min(reds$col))/30)
}
facet_hist(alcohol)
facet_hist('alcohol')
max(reds$alcohol)
facet_hist <- function(col, max, min) {
ggplot(reds, aes(x = reds$col, fill = as.factor(quality))) +
geom_histogram(binwidth =
(max - min)/30)
}
facet_hist(alcohol, max(reds$alcohol), min(reds$alcohol))
facet_hist <- function(col, max, min) {
ggplot(reds, aes(x = col, fill = as.factor(quality))) +
geom_histogram(binwidth =
(max - min)/30)
}
facet_hist(alcohol, max(reds$alcohol), min(reds$alcohol))
facet_hist(reds$alcohol, max(reds$alcohol), min(reds$alcohol))
facet_hist <- function(col) {
ggplot(reds, aes_string(x = col, fill = as.factor(quality))) +
geom_histogram(binwidth =
(max(reds[col]) - min(reds[col]))/30)
}
facet_hist('alcohol')
facet_hist <- function(col) {
ggplot(reds, aes_string(x = col, fill = as.factor('quality'))) +
geom_histogram(binwidth =
(max(reds[col]) - min(reds[col]))/30)
}
facet_hist('alcohol')
facet_hist <- function(col) {
ggplot(reds, aes_string(x = col, fill = as.factor(reds$quality))) +
geom_histogram(binwidth =
(max(reds[col]) - min(reds[col]))/30)
}
facet_hist('alcohol')
facet_hist <- function(col) {
ggplot(reds, aes_string(x = col)) +
geom_histogram(aes(fill = as.factor(quality)),
binwidth = (max(reds[col]) - min(reds[col]))/30)
}
facet_hist('alcohol')
facet_hist_grid <- function(col) {
ggplot(reds, aes_string(x = col)) +
geom_histogram(binwidth = (max(reds[col]) - min(reds[col]))/30) +
facet_grid(quality ~ .)
}
ggplot(reds, aes(x = alcohol)) +
geom_histogram() +
facet_grid(quality ~ .)
facet_hist_grid('alcohol')
ggplot(reds, aes(x = volatile.acidity)) +
geom_histogram() +
facet_grid(quality ~ .)
facet_hist_grid('volatile.acidity')
facet_hist_with_color('volatile.acidity')
facet_hist_with_color('volatile.acidity')
facet_hist_with_color <- function(col) {
ggplot(reds, aes_string(x = col)) +
geom_histogram(aes(fill = as.factor(quality)),
binwidth = (max(reds[col]) - min(reds[col]))/30)
}
facet_hist_with_color('volatile.acidity')
ggplot(reds, aes(x = alcohol, y = factor(quality))) +
geom_jitter(aes(colour = factor(quality)))
jitter_quality_vs <- function(col) {
ggplot(reds, aes_string(x = col, y = factor('quality'))) +
geom_jitter(aes(colour = factor(quality)))
}
jitter_quality_vs(alcohol)
jitter_quality_vs('alcohol')
jitter_quality_vs <- function(col) {
ggplot(reds, aes_string(x = col, y = factor(quality))) +
geom_jitter(aes(colour = factor(quality)))
}
jitter_quality_vs('alcohol')
jitter_quality_vs <- function(col) {
ggplot(reds, aes_string(x = col, y = factor(reds$quality))) +
geom_jitter(aes(colour = factor(quality)))
}
jitter_quality_vs('alcohol')
jitter_quality_vs <- function(col) {
ggplot(reds, aes_string(x = col, y = factor(reds['quality']))) +
geom_jitter(aes(colour = factor(quality)))
}
jitter_quality_vs('alcohol')
jitter_quality_vs <- function(col) {
ggplot(reds, aes_string(x = col), aes(y = factor(quality))) +
geom_jitter(aes(colour = factor(quality)))
}
jitter_quality_vs('alcohol')
jitter_quality_vs <- function(col) {
ggplot(reds, aes_string(x = col, y = factor(quality))) +
geom_jitter(aes(colour = factor(quality)))
}
jitter_quality_vs('alcohol')
jitter_quality_vs <- function(col) {
ggplot(reds, aes_string(x = col, y = factor('quality'))) +
geom_jitter(aes(colour = factor(quality)))
}
jitter_quality_vs('alcohol')
ggplot(reds, aes_string(x = col, y = factor(reds$quality))) +
jitter_quality_vs <- function(col) {
ggplot(reds, aes_string(x = col, y = factor(reds$quality))) +
geom_jitter(aes(colour = factor(quality)))
}
jitter_quality_vs <- function(col) {
ggplot(reds, aes_string(x = col, y = factor(reds$quality))) +
geom_jitter(aes(colour = factor(quality)))
}
jitter_quality_vs('alcohol')
jitter_quality_vs <- function(col) {
ggplot(reds, aes_string(x = col)) +
geom_jitter(aes(y = factor(quality), colour = factor(quality)))
}
jitter_quality_vs('alcohol')
ggplot(reds, aes(factor(quality), alcohol, fill=factor(quality))) +
geom_boxplot()
box_quality_vs <- function(col) {
ggplot(reds, aes_string(y = col)) +
geom_boxplot(aes(x = factor(quality), fill=factor(quality)))
}
box_quality_vs('alcohol')
ggplot(reds, aes(x = alcohol, y = volatile.acidity)) +
geom_point(aes(color = factor(quality))) +
facet_grid(. ~ quality)
facet_vs <- function(col1, col2) {
ggplot(reds, aes_string(x = col1, y = col2)) +
geom_point(aes(color = factor(quality))) +
facet_grid(. ~ quality)
}
facet_vs('alcohol', 'volatile.acidity')
ggplot(reds, aes(x = alcohol, y = volatile.acidity)) +
geom_point(aes(color = factor(quality))) +
facet_grid(. ~ quality)
facet_vs('alcohol', 'sulphates')
line_vs <- function(col) {
ggplot(grouped_reds, aes_string(x = 'quality', y = col)) +
geom_line()
}
line_vs('alcohol_mean')
quality_groups <- group_by(reds, quality)
grouped_reds <- summarise(quality_groups,
alcohol_mean = mean(alcohol),
volatile_acid_mean = mean(volatile.acidity),
sulphates_mean = mean(sulphates),
n = n())
grouped_reds <- arrange(grouped_reds, quality)
line_vs <- function(col) {
ggplot(grouped_reds, aes_string(x = 'quality', y = col)) +
geom_line()
}
line_vs('alcohol_mean')
line_quantiles_vs <- function(col) {
ggplot(reds, aes_string(x = 'quality', y = col)) +
geom_point(alpha = 0.5,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.1,
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.5,
color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.9,
linetype = 2, color = 'blue')
}
line_quantiles_vs('alcohol')
line_vs('volatile_acid_mean')
line_quantiles_vs('volatile.acidity')
line_vs('sulphates_mean')
line_quantiles_vs('sulphates')
